Goals of this project:
- Create a functioning pomodoro timer that's useful to me personally
- And potentially useful to others
- that works both in Android and JRE (currently works on Android and JRE CLI, may create Swing UI version at some point
    although I like the way the CLI turned out)
- Make this as purely functional as possible (even if a bit impractical) as an exercise in improving FP skills
- Stable for rest of my life (avoid dependence on third-party libraries where possible)

Functional goals:
- Slacking off should only be possible at the cost of being annoyed.
- Low battery use
- Operates smoothly and reliably

Origins:  

I created the original "Annoying Pomodoro" (which still exists under the 
"Annoying Pomodoro" name on SourceForge) using Perl, when I was a lawyer 
and not yet a professional programmer.

After several years I moved to a Linux PC and was going to re-build the
original Windows application.  However, with years of programming experience
I could now see that the original application had serious problems, and one
of the libraries was also no longer available.  

Rather than try to fix these major issues, I decided to rebuild the app
in Kotlin in such a way that it could be deployed both on my phone and 
on the desktop.  Additionally perhaps part of the goal is to over-engineer 
it a little as a way to learn functional programming and try out some 
ideas I have about maximizing flexibility.  

This uses some of the same resources as the original, but is otherwise a 
complete rewrite.

Functional programming:

Overall my goal is to use functional programming wherever practical. I 
see FP as a good thing, but not mandatory. For example, while higher-
order functions are ideal, they have some undesirable effects like not 
easily being able to trace the program's flow from the code alone, and
making the call stack more confusing.  And while avoiding mutation is a
good idea, mutation is not so profane that you should add object 
structure (or even libraries!) to avoid it.  So I've allowed some mutation,
but minimally.  

Multiple UIs:

One goal (only realized for CLI/Android as of 2.0) is to develop for multiple UIs in
the same codebase.  For now, this just means that any Android stuff is
kept in its own separate class.  Any future interface should extend MainUI
and implement any methods therein.

In practice, I've found that more depends on the UI than I hoped, 
including the settings and sound.  So adding a JRE UI wasn't as easy as expected.

To accomplish this goal I've created a monorepo as described below.

Repository structure:

This is a monorepo containing the java UI, the Android UI, and the lib.
Even though you will only need one UI and the lib to run it.  Ordinarily
a monorepo is considered an anti-pattern but in this case I think that in 
a sense it is "one project" in that the whole thing is designed to 
accomplish compatibility across multiple UIs.  It's also trivial to split
off the library if needed in the future due to the separate folder structure.

The goal is that each project should be able to compile on its own without the
monorepo structure and simply the lib jar. In the past I've lazily mixed up
project settings in different places, but hopefully that is minimized now.

Classes (to be expanded): 
- Universal state - This handles all state that isn't UI-focused.  Not 
	very functional but it works for keeping things simple.
- TimerRun - this refers to a time period in which the Pomodoro timer is running.
	A break is a timer run, a work period is a timer run.  Subclassed as needed.
	
And that's about it. If anyone wants to add to this please feel free to 
make a PR and I may or may not accept it.  Fork at will but note the license
terms.  And contact me if any help is needed.

Ravi Suri
rsuriprog@gmail.com
